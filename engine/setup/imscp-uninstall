#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2017 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

=head1 NAME

imscp-uninstall Uninstall i-MSCP

=head1 SYNOPSIS

 imscp-uninstall [options]...

=cut

# TODO: This script should be idempotent.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Debug;
use iMSCP::Getopt;
use iMSCP::Bootstrapper;
use iMSCP::Dialog;
use iMSCP::Dir;
use iMSCP::File;
use iMSCP::Stepper;
use iMSCP::Database;
use iMSCP::SystemUser;
use iMSCP::Execute;
use iMSCP::Servers;
use iMSCP::Packages;
use iMSCP::Service;
use Servers::sqld;
use File::Basename;
use POSIX qw(locale_h);
use locale;

setlocale(LC_ALL, 'C.UTF-8');
$ENV{'LANG'} = 'C.UTF-8';

# Set backend mode
{
    no warnings qw/once/;
    $main::execmode = 'uninstall';
}

newDebug('imscp-uninstall.log');

sub startUp
{
    iMSCP::Getopt->debug(1); # Enforce debug mode (logs)
    iMSCP::Bootstrapper->getInstance()->boot();
    0;
}

sub process
{
    _userDialog();

    my @steps = (
        [ \&_removeCustomers, 'Removing i-MSCP customers' ],
        [ \&_uninstallPackages, 'Uninstalling i-MSCP packages' ],
        [ \&_uninstallServers, 'Uninstalling i-MSCP servers' ],
        [ \&_uninstallServices, 'Uninstalling i-MSCP services' ],
        [ \&_removeCrontabFile, 'Removing i-MSCP crontab file' ],
        [ \&_removeLogrotateFile, 'Removing i-MSCP logrotate file' ],
        [ \&_removeSysctlFile, 'Removing i-MSCP sysctl file' ],
        [ \&_removeSqlData, 'Removing i-MSCP SQL data' ],
        [ \&_removeiMSCPSystemUser, 'Removing i-MSCP system user' ],
        [ \&_removeFiles, 'Removing i-MSCP files' ],
    );

    my $step = 1;
    for (@steps) {
        my $rs = step(@{$_}, scalar @steps, $step);
        return $rs if $rs;
        $step++;
    }

    iMSCP::Dialog->getInstance()->endGauge();
    0;
}

sub shutDown
{

    iMSCP::Dialog->getInstance()->infobox(<<EOF);

\\Z1Congratulations\\Zn

iMSCP has been successfully uninstalled.

You can find uninstallation logs at /tmp/imscp-uninstall.log
EOF

    0;
}

sub _userDialog
{
    my $dialog = iMSCP::Dialog->getInstance();
    $dialog->set('title', 'i-MSCP Uninstaller Dialog');

    exit 0 if $dialog->yesno(<<EOF, 1);

Welcome to the \\Z4i-MSCP $main::imscpConfig{'Version'}\\Zn uninstaller dialog.

This program will uninstall i-MSCP from your server.

\\Z1WARNING\\Zn

All i-MSCP data will be removed.

\\Z4NOTE\\Zn

During the uninstallation process some or all services might require to be shutdown or restarted.

Do you want to continue?
EOF
}

sub _removeCustomers
{
    my $tables = {
        admin => [ 'admin_status', "AND `admin_type` = 'user'" ],
        domain => 'domain_status',
        domain_aliasses => 'alias_status',
        subdomain => 'subdomain_status',
        subdomain_alias => 'subdomain_alias_status',
        mail_users => 'status',
        htaccess => 'status',
        htaccess_groups => 'status',
        htaccess_users => 'status',
        ssl_certs => 'status'
    };

    my $database = iMSCP::Database->factory();
    my $aditionalCondition;

    while (my ($table, $field) = each %$tables) {
        if(ref $field eq 'ARRAY') {
            $aditionalCondition = $field->[1];
            $field = $field->[0];
        } else {
            $aditionalCondition = ''
        }

        my $rdata = $database->doQuery('dummy', "UPDATE `$table` SET `$field` = 'todelete' $aditionalCondition");
        unless(ref $rdata eq 'HASH') {
            error($rdata);
            return 1;
        }
    }

    iMSCP::Bootstrapper->getInstance()->unlock();

    my $rs = execute("perl $main::imscpConfig{'ENGINE_ROOT_DIR'}/imscp-rqst-mngr", \my $stdout, \my $stderr);
    debug($stdout) if $stdout;
    error( $stderr || 'Unknown error' ) if $rs;
    return $rs if $rs;

    iMSCP::Bootstrapper->getInstance()->lock();
    0;
}

sub _uninstallPackages
{
    startDetail();

    my @packages = iMSCP::Packages->getInstance()->getListWithFullNames();
    my $nbSteps = scalar @packages;
    my ($step, $rs) = (1, 0);

    for my $package (@packages) {
        eval "require $package";
        my $instance = $package->getInstance();
        if(my $subref = $instance->can('uninstall')) {
             $rs = step(
                 sub { $subref->($instance) }, sprintf('Running %s uninstall tasks...', $package), $nbSteps, $step
             );
             last if $rs;
        }
        $step++;
    }

    endDetail();
    $rs;
}

sub _uninstallServers
{
    startDetail();

    my @servers = iMSCP::Servers->getInstance()->getListWithFullNames();
    my $nbSteps = scalar @servers;
    my ($step, $rs) = (1, 0);

    for my $server(@servers) {
        eval "require $server";
        my $instance = $server->factory();
        if(my $subref = $instance->can('uninstall')) {
            $rs = step(
                sub { $subref->($instance) }, sprintf('Running %s uninstall tasks...', $server), $nbSteps, $step
            );
            last if $rs;
        }
        $step++;
    }

    endDetail();
    $rs;
}

sub _uninstallServices
{
    my $serviceMngr = iMSCP::Service->getInstance();
    $serviceMngr->remove($_) for 'imscp_daemon', 'imscp_traffic', 'imscp_mountall';

    for my $service('bind9', 'bind9-resolvconf') {
        $serviceMngr->disable($service) if $serviceMngr->isSystemd();

        if(-f "/etc/systemd/system/$service.service") {
            my $rs = iMSCP::File->new( filename => "/etc/systemd/system/$service.service" )->delFile();
            return $rs if $rs;
        }

        if("/lib/systemd/system/$service.service") {
            $serviceMngr->enable($service) if $serviceMngr->isSystemd();
        }
    }

    0;
}

sub _removeCrontabFile
{
    return 0 unless -f '/etc/cron.d/imscp';
    iMSCP::File->new( filename => '/etc/cron.d/imscp' )->delFile();
}

sub _removeLogrotateFile
{
    return 0 unless -f '/etc/logrotate.d/imscp';
    iMSCP::File->new( filename => '/etc/logrotate.d/imscp' )->delFile();
}

sub _removeSysctlFile
{
    return 0 unless -f '/etc/sysctl.d/imscp.conf';
    iMSCP::File->new( filename => '/etc/sysctl.d/imscp.conf' )->delFile();
}

# FIXME: localhost is not always the correct value
sub _removeSqlData
{
    my $sqlServer = Servers::sqld->factory();
    my $database = iMSCP::Database->factory();

    # Remove customer's sql users

    my $rdata = $database->doQuery('sqlu_name', 'SELECT DISTINCT sqlu_name, sqlu_host FROM sql_user');
    unless(ref $rdata eq 'HASH') {
        error($rdata);
        return 1;
    }

    for (keys %{$rdata}) {
        $sqlServer->dropUser($rdata->{$_}->{'sqlu_name'}, $rdata->{$_}->{'sqlu_host'});
    }

    # Remove customer's sql databases
    $rdata = $database->doQuery('sqld_name', 'SELECT sqld_name FROM sql_database');
    unless(ref $rdata eq 'HASH') {
        error($rdata);
        return 1;
    }
    $database->doQuery('delete', "DROP DATABASE IF EXISTS `$rdata->{$_}->{'sqld_name'}`") for keys %{$rdata};

    # Remove i-MSCP sql database
    $database->doQuery('delete', "DROP DATABASE IF EXISTS `$main::imscpConfig{'DATABASE_NAME'}`");
    unless(ref $rdata eq 'HASH') {
        error($rdata);
        return 1;
    }

    0;
}

sub _removeiMSCPSystemUser
{
    iMSCP::SystemUser->new( force => 1 )->delSystemUser( $main::imscpConfig{'IMSCP_USER'} );
}

sub _removeFiles
{
    chdir('/');

    for('/usr/local/sbin/imscp-dpkg-post-invoke.pl', '/etc/apt/apt.conf.d/90imscp') {
        next unless -f;
        my $rs = iMSCP::File->new( filename => $_ )->delFile();
        return $rs if $rs;
    }

    for ($main::imscpConfig{'CONF_DIR'}, $main::imscpConfig{'USER_WEB_DIR'}, $main::imscpConfig{'LOG_DIR'},
        $main::imscpConfig{'ROOT_DIR'}
    ) {
        my $rs = iMSCP::Dir->new( dirname => $_ )->remove();
        return $rs if $rs;
    }

    0;
}

my $rs = 0;
$rs ||= startUp();
$rs ||= process();
$rs ||= shutDown();
exit $rs;

=head1 AUTHOR

i-MSCP Team <team@i-mscp.net>

=cut
