#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2017 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

=head1 NAME

imscp-net-traffic-logger - start/stop i-MSCP traffic logger.

=head1 SYNOPSIS

 imscp-net-traffic-logger [options]... start|stop

=cut

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Execute;
use iMSCP::Getopt;
use File::Basename;
use POSIX qw(locale_h);
use locale;

setlocale(LC_ALL, 'C.UTF-8');
$ENV{'LANG'} = 'C.UTF-8';

sub start
{
    for my $chain(
        '-N IMSCP_INPUT',
        '-N IMSCP_OUTPUT',
        '-I INPUT ! -i lo -j IMSCP_INPUT',
        '-I OUTPUT ! -o lo -j IMSCP_OUTPUT'
    ) {
        my $rs = execute("iptables $chain", \ my $stdout, \ my $stderr);
        debug($stdout) if $stdout;
        error( $stderr || 'Unknown error' ) if $rs;
        return $rs if $rs;
    }

    my $httpPort = $main::imscpConfig{'BASE_SERVER_VHOST_HTTP_PORT'};
    my $httpsPort = $main::imscpConfig{'BASE_SERVER_VHOST_HTTPS_PORT'};

    for my $port($httpPort, $httpsPort, 80, 443, 110, 143, 25, 465, 587, 995, 993, 20, 21) {
        next unless $port;

        my $rs = execute("iptables -I IMSCP_INPUT -p tcp --dport $port", \ my $stdout, \ my $stderr);
        debug($stdout) if $stdout;
        error( $stderr || 'Unknown error' ) if $rs;
        return $rs if $rs;

        $rs = execute("iptables -I IMSCP_OUTPUT -p tcp --sport $port", \$stdout, \$stderr);
        debug($stdout) if $stdout;
        error( $stderr || 'Unknown error' ) if $rs;
        return $rs if $rs;
    }

    for my $port(qw(25 465 587)) {
        my $rs = execute("iptables -I IMSCP_INPUT -p tcp --sport $port", \ my $stdout, \ my $stderr);
        debug($stdout) if $stdout;
        error( $stderr || 'Unknown error' ) if $rs;
        return $rs if $rs;

        $rs = execute("iptables -I IMSCP_OUTPUT -p tcp --dport $port", \$stdout, \$stderr);
        debug($stdout) if $stdout;
        error( $stderr || 'Unknown error' ) if $rs;
        return $rs if $rs;
    }

    for my $chain('IMSCP_INPUT', 'IMSCP_OUTPUT') {
        my $rs = execute("iptables -A $chain -j RETURN", \ my $stdout, \ my $stderr);
        debug($stdout) if $stdout;
        error( $stderr || 'Unknown error' ) if $rs;
        return $rs if $rs;
    }

    0;
}

sub stop
{
    my $rs = execute('iptables -S', \ my $stdout, \ my $stderr);
    debug($stdout) if $stdout;
    error( $stderr || 'Unknown error' ) if $rs;
    return $rs if $rs;

    my %data;
    $data{$2} = $1 while($stdout =~ /^-A\s+((?:INPUT|OUTPUT).*?(IMSCP_INPUT|IMSCP_OUTPUT))/gm);

    unless(%data) {
        # Handle case were rules on INPUT/OUTPUT chains were already removed
        while($stdout =~ /^-N\s+(IMSCP_INPUT|IMSCP_OUTPUT)/gm) {
            for my $op('-F', '-X') {
                $rs = execute("iptables $op $1", \$stdout, \$stderr);
                debug($stdout) if $stdout;
                error( $stderr || 'Unknown error' ) if $rs;
                return $rs if $rs;
            }
        }

        return 0;
    }

    while(my($chain, $rule) = each(%data)) {
        for my $op('-D', '-F', '-X') {
            $rs = execute($op eq '-D' ? "iptables $op $rule" : "iptables $op $chain", \$stdout, \$stderr);
            debug($stdout) if $stdout;
            error( $stderr || 'Unknown error' ) if $rs;
            return $rs if $rs;
        }
    }

    0;
}

newDebug('imscp-net-traffic-logger.log');

iMSCP::Getopt->parseNoDefault(sprintf('Usage: perl %s [OPTION]... start|stop', basename($0)) . qq {

Script which start/stop i-MSCP traffic logger.

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
 'debug|d'   => sub { iMSCP::Getopt->debug(@_) },
 'verbose|v' => sub { setVerbose(@_); }
);

iMSCP::Bootstrapper->getInstance()->boot(
    {
        mode            => 'backend',
        norequirements  => 1,
        nodatabase      => 1,
        nolock          => 1,
        config_readonly => 1
    }
);

my %dispatch = (
   'start' => sub { stop() || start() },
   'stop' => \&stop
);

my $action = shift;
$action && $action =~ /^(?:start|stop)$/ or iMSCP::Getopt->showUsage();
exit $dispatch{ $action }->();

=head1 AUTHOR

Laurent Declercq <l.declercq@nuxwin.com>

=cut
